// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class EffectParticleElementSize {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementSize {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

sizeXminValue():number {
  return this.bb!.readFloat32(this.bb_pos);
}

sizeXmaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 4);
}

sizeYminValue():number {
  return this.bb!.readFloat32(this.bb_pos + 8);
}

sizeYmaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 12);
}

scaleFactorMinValue():number {
  return this.bb!.readFloat32(this.bb_pos + 16);
}

scaleFactorMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 20);
}

static sizeOf():number {
  return 24;
}

static createEffectParticleElementSize(builder:flatbuffers.Builder, SizeXMinValue: number, SizeXMaxValue: number, SizeYMinValue: number, SizeYMaxValue: number, ScaleFactorMinValue: number, ScaleFactorMaxValue: number):flatbuffers.Offset {
  builder.prep(4, 24);
  builder.writeFloat32(ScaleFactorMaxValue);
  builder.writeFloat32(ScaleFactorMinValue);
  builder.writeFloat32(SizeYMaxValue);
  builder.writeFloat32(SizeYMinValue);
  builder.writeFloat32(SizeXMaxValue);
  builder.writeFloat32(SizeXMinValue);
  return builder.offset();
}

}
