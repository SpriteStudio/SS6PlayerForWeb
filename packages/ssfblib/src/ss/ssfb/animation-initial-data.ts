// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class AnimationInitialData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AnimationInitialData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAnimationInitialData(bb:flatbuffers.ByteBuffer, obj?:AnimationInitialData):AnimationInitialData {
  return (obj || new AnimationInitialData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAnimationInitialData(bb:flatbuffers.ByteBuffer, obj?:AnimationInitialData):AnimationInitialData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AnimationInitialData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

index():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

lowflag():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

highflag():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

priority():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

cellIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

opacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

localopacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

masklimen():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

positionX():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

positionY():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

positionZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

pivotX():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

pivotY():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

rotationX():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

rotationY():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

rotationZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

scaleX():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

scaleY():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

localscaleX():number {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

localscaleY():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

sizeX():number {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

sizeY():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

uvMoveX():number {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

uvMoveY():number {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

uvRotation():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

uvScaleX():number {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

uvScaleY():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

boundingRadius():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

instanceValueCurKeyframe():number {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

instanceValueStartFrame():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

instanceValueEndFrame():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

instanceValueLoopNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

instanceValueSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

instanceValueLoopflag():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

effectValueCurKeyframe():number {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

effectValueStartTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

effectValueSpeed():number {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

effectValueLoopflag():number {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startAnimationInitialData(builder:flatbuffers.Builder) {
  builder.startObject(38);
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(0, index, 0);
}

static addLowflag(builder:flatbuffers.Builder, lowflag:number) {
  builder.addFieldInt32(1, lowflag, 0);
}

static addHighflag(builder:flatbuffers.Builder, highflag:number) {
  builder.addFieldInt32(2, highflag, 0);
}

static addPriority(builder:flatbuffers.Builder, priority:number) {
  builder.addFieldInt16(3, priority, 0);
}

static addCellIndex(builder:flatbuffers.Builder, cellIndex:number) {
  builder.addFieldInt16(4, cellIndex, 0);
}

static addOpacity(builder:flatbuffers.Builder, opacity:number) {
  builder.addFieldInt16(5, opacity, 0);
}

static addLocalopacity(builder:flatbuffers.Builder, localopacity:number) {
  builder.addFieldInt16(6, localopacity, 0);
}

static addMasklimen(builder:flatbuffers.Builder, masklimen:number) {
  builder.addFieldInt16(7, masklimen, 0);
}

static addPositionX(builder:flatbuffers.Builder, positionX:number) {
  builder.addFieldFloat32(8, positionX, 0.0);
}

static addPositionY(builder:flatbuffers.Builder, positionY:number) {
  builder.addFieldFloat32(9, positionY, 0.0);
}

static addPositionZ(builder:flatbuffers.Builder, positionZ:number) {
  builder.addFieldFloat32(10, positionZ, 0.0);
}

static addPivotX(builder:flatbuffers.Builder, pivotX:number) {
  builder.addFieldFloat32(11, pivotX, 0.0);
}

static addPivotY(builder:flatbuffers.Builder, pivotY:number) {
  builder.addFieldFloat32(12, pivotY, 0.0);
}

static addRotationX(builder:flatbuffers.Builder, rotationX:number) {
  builder.addFieldFloat32(13, rotationX, 0.0);
}

static addRotationY(builder:flatbuffers.Builder, rotationY:number) {
  builder.addFieldFloat32(14, rotationY, 0.0);
}

static addRotationZ(builder:flatbuffers.Builder, rotationZ:number) {
  builder.addFieldFloat32(15, rotationZ, 0.0);
}

static addScaleX(builder:flatbuffers.Builder, scaleX:number) {
  builder.addFieldFloat32(16, scaleX, 0.0);
}

static addScaleY(builder:flatbuffers.Builder, scaleY:number) {
  builder.addFieldFloat32(17, scaleY, 0.0);
}

static addLocalscaleX(builder:flatbuffers.Builder, localscaleX:number) {
  builder.addFieldFloat32(18, localscaleX, 0.0);
}

static addLocalscaleY(builder:flatbuffers.Builder, localscaleY:number) {
  builder.addFieldFloat32(19, localscaleY, 0.0);
}

static addSizeX(builder:flatbuffers.Builder, sizeX:number) {
  builder.addFieldFloat32(20, sizeX, 0.0);
}

static addSizeY(builder:flatbuffers.Builder, sizeY:number) {
  builder.addFieldFloat32(21, sizeY, 0.0);
}

static addUvMoveX(builder:flatbuffers.Builder, uvMoveX:number) {
  builder.addFieldFloat32(22, uvMoveX, 0.0);
}

static addUvMoveY(builder:flatbuffers.Builder, uvMoveY:number) {
  builder.addFieldFloat32(23, uvMoveY, 0.0);
}

static addUvRotation(builder:flatbuffers.Builder, uvRotation:number) {
  builder.addFieldFloat32(24, uvRotation, 0.0);
}

static addUvScaleX(builder:flatbuffers.Builder, uvScaleX:number) {
  builder.addFieldFloat32(25, uvScaleX, 0.0);
}

static addUvScaleY(builder:flatbuffers.Builder, uvScaleY:number) {
  builder.addFieldFloat32(26, uvScaleY, 0.0);
}

static addBoundingRadius(builder:flatbuffers.Builder, boundingRadius:number) {
  builder.addFieldFloat32(27, boundingRadius, 0.0);
}

static addInstanceValueCurKeyframe(builder:flatbuffers.Builder, instanceValueCurKeyframe:number) {
  builder.addFieldInt32(28, instanceValueCurKeyframe, 0);
}

static addInstanceValueStartFrame(builder:flatbuffers.Builder, instanceValueStartFrame:number) {
  builder.addFieldInt32(29, instanceValueStartFrame, 0);
}

static addInstanceValueEndFrame(builder:flatbuffers.Builder, instanceValueEndFrame:number) {
  builder.addFieldInt32(30, instanceValueEndFrame, 0);
}

static addInstanceValueLoopNum(builder:flatbuffers.Builder, instanceValueLoopNum:number) {
  builder.addFieldInt32(31, instanceValueLoopNum, 0);
}

static addInstanceValueSpeed(builder:flatbuffers.Builder, instanceValueSpeed:number) {
  builder.addFieldFloat32(32, instanceValueSpeed, 0.0);
}

static addInstanceValueLoopflag(builder:flatbuffers.Builder, instanceValueLoopflag:number) {
  builder.addFieldInt32(33, instanceValueLoopflag, 0);
}

static addEffectValueCurKeyframe(builder:flatbuffers.Builder, effectValueCurKeyframe:number) {
  builder.addFieldInt32(34, effectValueCurKeyframe, 0);
}

static addEffectValueStartTime(builder:flatbuffers.Builder, effectValueStartTime:number) {
  builder.addFieldInt32(35, effectValueStartTime, 0);
}

static addEffectValueSpeed(builder:flatbuffers.Builder, effectValueSpeed:number) {
  builder.addFieldFloat32(36, effectValueSpeed, 0.0);
}

static addEffectValueLoopflag(builder:flatbuffers.Builder, effectValueLoopflag:number) {
  builder.addFieldInt32(37, effectValueLoopflag, 0);
}

static endAnimationInitialData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAnimationInitialData(builder:flatbuffers.Builder, index:number, lowflag:number, highflag:number, priority:number, cellIndex:number, opacity:number, localopacity:number, masklimen:number, positionX:number, positionY:number, positionZ:number, pivotX:number, pivotY:number, rotationX:number, rotationY:number, rotationZ:number, scaleX:number, scaleY:number, localscaleX:number, localscaleY:number, sizeX:number, sizeY:number, uvMoveX:number, uvMoveY:number, uvRotation:number, uvScaleX:number, uvScaleY:number, boundingRadius:number, instanceValueCurKeyframe:number, instanceValueStartFrame:number, instanceValueEndFrame:number, instanceValueLoopNum:number, instanceValueSpeed:number, instanceValueLoopflag:number, effectValueCurKeyframe:number, effectValueStartTime:number, effectValueSpeed:number, effectValueLoopflag:number):flatbuffers.Offset {
  AnimationInitialData.startAnimationInitialData(builder);
  AnimationInitialData.addIndex(builder, index);
  AnimationInitialData.addLowflag(builder, lowflag);
  AnimationInitialData.addHighflag(builder, highflag);
  AnimationInitialData.addPriority(builder, priority);
  AnimationInitialData.addCellIndex(builder, cellIndex);
  AnimationInitialData.addOpacity(builder, opacity);
  AnimationInitialData.addLocalopacity(builder, localopacity);
  AnimationInitialData.addMasklimen(builder, masklimen);
  AnimationInitialData.addPositionX(builder, positionX);
  AnimationInitialData.addPositionY(builder, positionY);
  AnimationInitialData.addPositionZ(builder, positionZ);
  AnimationInitialData.addPivotX(builder, pivotX);
  AnimationInitialData.addPivotY(builder, pivotY);
  AnimationInitialData.addRotationX(builder, rotationX);
  AnimationInitialData.addRotationY(builder, rotationY);
  AnimationInitialData.addRotationZ(builder, rotationZ);
  AnimationInitialData.addScaleX(builder, scaleX);
  AnimationInitialData.addScaleY(builder, scaleY);
  AnimationInitialData.addLocalscaleX(builder, localscaleX);
  AnimationInitialData.addLocalscaleY(builder, localscaleY);
  AnimationInitialData.addSizeX(builder, sizeX);
  AnimationInitialData.addSizeY(builder, sizeY);
  AnimationInitialData.addUvMoveX(builder, uvMoveX);
  AnimationInitialData.addUvMoveY(builder, uvMoveY);
  AnimationInitialData.addUvRotation(builder, uvRotation);
  AnimationInitialData.addUvScaleX(builder, uvScaleX);
  AnimationInitialData.addUvScaleY(builder, uvScaleY);
  AnimationInitialData.addBoundingRadius(builder, boundingRadius);
  AnimationInitialData.addInstanceValueCurKeyframe(builder, instanceValueCurKeyframe);
  AnimationInitialData.addInstanceValueStartFrame(builder, instanceValueStartFrame);
  AnimationInitialData.addInstanceValueEndFrame(builder, instanceValueEndFrame);
  AnimationInitialData.addInstanceValueLoopNum(builder, instanceValueLoopNum);
  AnimationInitialData.addInstanceValueSpeed(builder, instanceValueSpeed);
  AnimationInitialData.addInstanceValueLoopflag(builder, instanceValueLoopflag);
  AnimationInitialData.addEffectValueCurKeyframe(builder, effectValueCurKeyframe);
  AnimationInitialData.addEffectValueStartTime(builder, effectValueStartTime);
  AnimationInitialData.addEffectValueSpeed(builder, effectValueSpeed);
  AnimationInitialData.addEffectValueLoopflag(builder, effectValueLoopflag);
  return AnimationInitialData.endAnimationInitialData(builder);
}
}
