// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AnimePackData } from '../../ss/ssfb/anime-pack-data.js';
import { Cell } from '../../ss/ssfb/cell.js';
import { EffectFile } from '../../ss/ssfb/effect-file.js';


export class ProjectData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ProjectData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProjectData(bb:flatbuffers.ByteBuffer, obj?:ProjectData):ProjectData {
  return (obj || new ProjectData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProjectData(bb:flatbuffers.ByteBuffer, obj?:ProjectData):ProjectData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ProjectData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('SSFB');
}

dataId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

flags():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

imageBaseDir():string|null
imageBaseDir(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imageBaseDir(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

cells(index: number, obj?:Cell):Cell|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Cell()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

cellsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

animePacks(index: number, obj?:AnimePackData):AnimePackData|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new AnimePackData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

animePacksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

effectFileList(index: number, obj?:EffectFile):EffectFile|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new EffectFile()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

effectFileListLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

numCells():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

numAnimePacks():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

numEffectFileList():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

static startProjectData(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addDataId(builder:flatbuffers.Builder, dataId:number) {
  builder.addFieldInt32(0, dataId, 0);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(1, version, 0);
}

static addFlags(builder:flatbuffers.Builder, flags:number) {
  builder.addFieldInt32(2, flags, 0);
}

static addImageBaseDir(builder:flatbuffers.Builder, imageBaseDirOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, imageBaseDirOffset, 0);
}

static addCells(builder:flatbuffers.Builder, cellsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, cellsOffset, 0);
}

static createCellsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCellsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAnimePacks(builder:flatbuffers.Builder, animePacksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, animePacksOffset, 0);
}

static createAnimePacksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAnimePacksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEffectFileList(builder:flatbuffers.Builder, effectFileListOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, effectFileListOffset, 0);
}

static createEffectFileListVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEffectFileListVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNumCells(builder:flatbuffers.Builder, numCells:number) {
  builder.addFieldInt16(7, numCells, 0);
}

static addNumAnimePacks(builder:flatbuffers.Builder, numAnimePacks:number) {
  builder.addFieldInt16(8, numAnimePacks, 0);
}

static addNumEffectFileList(builder:flatbuffers.Builder, numEffectFileList:number) {
  builder.addFieldInt16(9, numEffectFileList, 0);
}

static endProjectData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishProjectDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SSFB');
}

static finishSizePrefixedProjectDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'SSFB', true);
}

static createProjectData(builder:flatbuffers.Builder, dataId:number, version:number, flags:number, imageBaseDirOffset:flatbuffers.Offset, cellsOffset:flatbuffers.Offset, animePacksOffset:flatbuffers.Offset, effectFileListOffset:flatbuffers.Offset, numCells:number, numAnimePacks:number, numEffectFileList:number):flatbuffers.Offset {
  ProjectData.startProjectData(builder);
  ProjectData.addDataId(builder, dataId);
  ProjectData.addVersion(builder, version);
  ProjectData.addFlags(builder, flags);
  ProjectData.addImageBaseDir(builder, imageBaseDirOffset);
  ProjectData.addCells(builder, cellsOffset);
  ProjectData.addAnimePacks(builder, animePacksOffset);
  ProjectData.addEffectFileList(builder, effectFileListOffset);
  ProjectData.addNumCells(builder, numCells);
  ProjectData.addNumAnimePacks(builder, numAnimePacks);
  ProjectData.addNumEffectFileList(builder, numEffectFileList);
  return ProjectData.endProjectData(builder);
}
}
