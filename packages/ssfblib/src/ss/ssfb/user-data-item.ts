// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { userDataValue, unionTouserDataValue, unionListTouserDataValue } from '../../ss/ssfb/user-data-value.js';


export class userDataItem {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):userDataItem {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsuserDataItem(bb:flatbuffers.ByteBuffer, obj?:userDataItem):userDataItem {
  return (obj || new userDataItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsuserDataItem(bb:flatbuffers.ByteBuffer, obj?:userDataItem):userDataItem {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new userDataItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

flags():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

arrayIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

dataType(index: number):userDataValue|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

data(index: number, obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startuserDataItem(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addFlags(builder:flatbuffers.Builder, flags:number) {
  builder.addFieldInt16(0, flags, 0);
}

static addArrayIndex(builder:flatbuffers.Builder, arrayIndex:number) {
  builder.addFieldInt16(1, arrayIndex, 0);
}

static addDataType(builder:flatbuffers.Builder, dataTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, dataTypeOffset, 0);
}

static createDataTypeVector(builder:flatbuffers.Builder, data:userDataValue[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static enduserDataItem(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createuserDataItem(builder:flatbuffers.Builder, flags:number, arrayIndex:number, dataTypeOffset:flatbuffers.Offset, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  userDataItem.startuserDataItem(builder);
  userDataItem.addFlags(builder, flags);
  userDataItem.addArrayIndex(builder, arrayIndex);
  userDataItem.addDataType(builder, dataTypeOffset);
  userDataItem.addData(builder, dataOffset);
  return userDataItem.enduserDataItem(builder);
}
}
