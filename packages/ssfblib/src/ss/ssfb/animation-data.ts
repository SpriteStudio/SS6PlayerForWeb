// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AnimationInitialData } from '../../ss/ssfb/animation-initial-data.js';
import { frameDataIndex } from '../../ss/ssfb/frame-data-index.js';
import { labelDataItem } from '../../ss/ssfb/label-data-item.js';
import { meshDataIndices } from '../../ss/ssfb/mesh-data-indices.js';
import { meshDataUV } from '../../ss/ssfb/mesh-data-uv.js';
import { userDataPerFrame } from '../../ss/ssfb/user-data-per-frame.js';


export class AnimationData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AnimationData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAnimationData(bb:flatbuffers.ByteBuffer, obj?:AnimationData):AnimationData {
  return (obj || new AnimationData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAnimationData(bb:flatbuffers.ByteBuffer, obj?:AnimationData):AnimationData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AnimationData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

defaultData(index: number, obj?:AnimationInitialData):AnimationInitialData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new AnimationInitialData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

defaultDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

frameData(index: number, obj?:frameDataIndex):frameDataIndex|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new frameDataIndex()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

frameDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

userData(index: number, obj?:userDataPerFrame):userDataPerFrame|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new userDataPerFrame()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

userDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

labelData(index: number, obj?:labelDataItem):labelDataItem|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new labelDataItem()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

labelDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

meshsDataUv(index: number, obj?:meshDataUV):meshDataUV|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new meshDataUV()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

meshsDataUvLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

meshsDataIndices(index: number, obj?:meshDataIndices):meshDataIndices|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new meshDataIndices()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

meshsDataIndicesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

startFrames():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

endFrames():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

totalFrames():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

fps():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

labelNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

canvasSizeW():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

canvasSizeH():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

canvasPvotX():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

canvasPvotY():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startAnimationData(builder:flatbuffers.Builder) {
  builder.startObject(16);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addDefaultData(builder:flatbuffers.Builder, defaultDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, defaultDataOffset, 0);
}

static createDefaultDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDefaultDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFrameData(builder:flatbuffers.Builder, frameDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, frameDataOffset, 0);
}

static createFrameDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFrameDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUserData(builder:flatbuffers.Builder, userDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, userDataOffset, 0);
}

static createUserDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUserDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLabelData(builder:flatbuffers.Builder, labelDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, labelDataOffset, 0);
}

static createLabelDataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLabelDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMeshsDataUv(builder:flatbuffers.Builder, meshsDataUvOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, meshsDataUvOffset, 0);
}

static createMeshsDataUvVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMeshsDataUvVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMeshsDataIndices(builder:flatbuffers.Builder, meshsDataIndicesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, meshsDataIndicesOffset, 0);
}

static createMeshsDataIndicesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMeshsDataIndicesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addStartFrames(builder:flatbuffers.Builder, startFrames:number) {
  builder.addFieldInt16(7, startFrames, 0);
}

static addEndFrames(builder:flatbuffers.Builder, endFrames:number) {
  builder.addFieldInt16(8, endFrames, 0);
}

static addTotalFrames(builder:flatbuffers.Builder, totalFrames:number) {
  builder.addFieldInt16(9, totalFrames, 0);
}

static addFps(builder:flatbuffers.Builder, fps:number) {
  builder.addFieldInt16(10, fps, 0);
}

static addLabelNum(builder:flatbuffers.Builder, labelNum:number) {
  builder.addFieldInt16(11, labelNum, 0);
}

static addCanvasSizeW(builder:flatbuffers.Builder, canvasSizeW:number) {
  builder.addFieldInt16(12, canvasSizeW, 0);
}

static addCanvasSizeH(builder:flatbuffers.Builder, canvasSizeH:number) {
  builder.addFieldInt16(13, canvasSizeH, 0);
}

static addCanvasPvotX(builder:flatbuffers.Builder, canvasPvotX:number) {
  builder.addFieldFloat32(14, canvasPvotX, 0.0);
}

static addCanvasPvotY(builder:flatbuffers.Builder, canvasPvotY:number) {
  builder.addFieldFloat32(15, canvasPvotY, 0.0);
}

static endAnimationData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAnimationData(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, defaultDataOffset:flatbuffers.Offset, frameDataOffset:flatbuffers.Offset, userDataOffset:flatbuffers.Offset, labelDataOffset:flatbuffers.Offset, meshsDataUvOffset:flatbuffers.Offset, meshsDataIndicesOffset:flatbuffers.Offset, startFrames:number, endFrames:number, totalFrames:number, fps:number, labelNum:number, canvasSizeW:number, canvasSizeH:number, canvasPvotX:number, canvasPvotY:number):flatbuffers.Offset {
  AnimationData.startAnimationData(builder);
  AnimationData.addName(builder, nameOffset);
  AnimationData.addDefaultData(builder, defaultDataOffset);
  AnimationData.addFrameData(builder, frameDataOffset);
  AnimationData.addUserData(builder, userDataOffset);
  AnimationData.addLabelData(builder, labelDataOffset);
  AnimationData.addMeshsDataUv(builder, meshsDataUvOffset);
  AnimationData.addMeshsDataIndices(builder, meshsDataIndicesOffset);
  AnimationData.addStartFrames(builder, startFrames);
  AnimationData.addEndFrames(builder, endFrames);
  AnimationData.addTotalFrames(builder, totalFrames);
  AnimationData.addFps(builder, fps);
  AnimationData.addLabelNum(builder, labelNum);
  AnimationData.addCanvasSizeW(builder, canvasSizeW);
  AnimationData.addCanvasSizeH(builder, canvasSizeH);
  AnimationData.addCanvasPvotX(builder, canvasPvotX);
  AnimationData.addCanvasPvotY(builder, canvasPvotY);
  return AnimationData.endAnimationData(builder);
}
}
