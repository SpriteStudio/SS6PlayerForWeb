// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class partState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):partState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAspartState(bb:flatbuffers.ByteBuffer, obj?:partState):partState {
  return (obj || new partState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAspartState(bb:flatbuffers.ByteBuffer, obj?:partState):partState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new partState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

index():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

flag1():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

flag2():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

data(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startpartState(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(0, index, 0);
}

static addFlag1(builder:flatbuffers.Builder, flag1:number) {
  builder.addFieldInt32(1, flag1, 0);
}

static addFlag2(builder:flatbuffers.Builder, flag2:number) {
  builder.addFieldInt32(2, flag2, 0);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endpartState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createpartState(builder:flatbuffers.Builder, index:number, flag1:number, flag2:number, dataOffset:flatbuffers.Offset):flatbuffers.Offset {
  partState.startpartState(builder);
  partState.addIndex(builder, index);
  partState.addFlag1(builder, flag1);
  partState.addFlag2(builder, flag2);
  partState.addData(builder, dataOffset);
  return partState.endpartState(builder);
}
}
