// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class labelDataItem {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):labelDataItem {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAslabelDataItem(bb:flatbuffers.ByteBuffer, obj?:labelDataItem):labelDataItem {
  return (obj || new labelDataItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAslabelDataItem(bb:flatbuffers.ByteBuffer, obj?:labelDataItem):labelDataItem {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new labelDataItem()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

label():string|null
label(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
label(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

frameIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

static startlabelDataItem(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLabel(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, labelOffset, 0);
}

static addFrameIndex(builder:flatbuffers.Builder, frameIndex:number) {
  builder.addFieldInt16(1, frameIndex, 0);
}

static endlabelDataItem(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createlabelDataItem(builder:flatbuffers.Builder, labelOffset:flatbuffers.Offset, frameIndex:number):flatbuffers.Offset {
  labelDataItem.startlabelDataItem(builder);
  labelDataItem.addLabel(builder, labelOffset);
  labelDataItem.addFrameIndex(builder, frameIndex);
  return labelDataItem.endlabelDataItem(builder);
}
}
