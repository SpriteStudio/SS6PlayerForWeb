// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class EffectParticleElementBasic {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EffectParticleElementBasic {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

ssEffectFunctionType():number {
  return this.bb!.readInt32(this.bb_pos);
}

priority():number {
  return this.bb!.readInt32(this.bb_pos + 4);
}

maximumParticle():number {
  return this.bb!.readInt32(this.bb_pos + 8);
}

attimeCreate():number {
  return this.bb!.readInt32(this.bb_pos + 12);
}

interval():number {
  return this.bb!.readInt32(this.bb_pos + 16);
}

lifetime():number {
  return this.bb!.readInt32(this.bb_pos + 20);
}

speedMinValue():number {
  return this.bb!.readFloat32(this.bb_pos + 24);
}

speedMaxValue():number {
  return this.bb!.readFloat32(this.bb_pos + 28);
}

lifespanMinValue():number {
  return this.bb!.readInt32(this.bb_pos + 32);
}

lifespanMaxValue():number {
  return this.bb!.readInt32(this.bb_pos + 36);
}

angle():number {
  return this.bb!.readFloat32(this.bb_pos + 40);
}

angleVariance():number {
  return this.bb!.readFloat32(this.bb_pos + 44);
}

static sizeOf():number {
  return 48;
}

static createEffectParticleElementBasic(builder:flatbuffers.Builder, SsEffectFunctionType: number, priority: number, maximumParticle: number, attimeCreate: number, interval: number, lifetime: number, speedMinValue: number, speedMaxValue: number, lifespanMinValue: number, lifespanMaxValue: number, angle: number, angleVariance: number):flatbuffers.Offset {
  builder.prep(4, 48);
  builder.writeFloat32(angleVariance);
  builder.writeFloat32(angle);
  builder.writeInt32(lifespanMaxValue);
  builder.writeInt32(lifespanMinValue);
  builder.writeFloat32(speedMaxValue);
  builder.writeFloat32(speedMinValue);
  builder.writeInt32(lifetime);
  builder.writeInt32(interval);
  builder.writeInt32(attimeCreate);
  builder.writeInt32(maximumParticle);
  builder.writeInt32(priority);
  builder.writeInt32(SsEffectFunctionType);
  return builder.offset();
}

}
