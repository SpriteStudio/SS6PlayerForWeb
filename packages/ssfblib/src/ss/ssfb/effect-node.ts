// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { EffectNodeBehavior, unionToEffectNodeBehavior, unionListToEffectNodeBehavior } from '../../ss/ssfb/effect-node-behavior.js';


export class EffectNode {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EffectNode {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEffectNode(bb:flatbuffers.ByteBuffer, obj?:EffectNode):EffectNode {
  return (obj || new EffectNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEffectNode(bb:flatbuffers.ByteBuffer, obj?:EffectNode):EffectNode {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EffectNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

arrayIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

parentIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

type():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

cellIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

blendType():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

numBehavior():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

behaviorType(index: number):EffectNodeBehavior|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

behaviorTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

behaviorTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

behavior(index: number, obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

behaviorLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startEffectNode(builder:flatbuffers.Builder) {
  builder.startObject(8);
}

static addArrayIndex(builder:flatbuffers.Builder, arrayIndex:number) {
  builder.addFieldInt16(0, arrayIndex, 0);
}

static addParentIndex(builder:flatbuffers.Builder, parentIndex:number) {
  builder.addFieldInt16(1, parentIndex, 0);
}

static addType(builder:flatbuffers.Builder, type:number) {
  builder.addFieldInt16(2, type, 0);
}

static addCellIndex(builder:flatbuffers.Builder, cellIndex:number) {
  builder.addFieldInt16(3, cellIndex, 0);
}

static addBlendType(builder:flatbuffers.Builder, blendType:number) {
  builder.addFieldInt16(4, blendType, 0);
}

static addNumBehavior(builder:flatbuffers.Builder, numBehavior:number) {
  builder.addFieldInt16(5, numBehavior, 0);
}

static addBehaviorType(builder:flatbuffers.Builder, behaviorTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, behaviorTypeOffset, 0);
}

static createBehaviorTypeVector(builder:flatbuffers.Builder, data:EffectNodeBehavior[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startBehaviorTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addBehavior(builder:flatbuffers.Builder, behaviorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, behaviorOffset, 0);
}

static createBehaviorVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBehaviorVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endEffectNode(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEffectNode(builder:flatbuffers.Builder, arrayIndex:number, parentIndex:number, type:number, cellIndex:number, blendType:number, numBehavior:number, behaviorTypeOffset:flatbuffers.Offset, behaviorOffset:flatbuffers.Offset):flatbuffers.Offset {
  EffectNode.startEffectNode(builder);
  EffectNode.addArrayIndex(builder, arrayIndex);
  EffectNode.addParentIndex(builder, parentIndex);
  EffectNode.addType(builder, type);
  EffectNode.addCellIndex(builder, cellIndex);
  EffectNode.addBlendType(builder, blendType);
  EffectNode.addNumBehavior(builder, numBehavior);
  EffectNode.addBehaviorType(builder, behaviorTypeOffset);
  EffectNode.addBehavior(builder, behaviorOffset);
  return EffectNode.endEffectNode(builder);
}
}
