// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { AnimationData } from '../../ss/ssfb/animation-data.js';
import { PartData } from '../../ss/ssfb/part-data.js';


export class AnimePackData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):AnimePackData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAnimePackData(bb:flatbuffers.ByteBuffer, obj?:AnimePackData):AnimePackData {
  return (obj || new AnimePackData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAnimePackData(bb:flatbuffers.ByteBuffer, obj?:AnimePackData):AnimePackData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AnimePackData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

parts(index: number, obj?:PartData):PartData|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new PartData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

partsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

animations(index: number, obj?:AnimationData):AnimationData|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new AnimationData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

animationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startAnimePackData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addParts(builder:flatbuffers.Builder, partsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, partsOffset, 0);
}

static createPartsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPartsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAnimations(builder:flatbuffers.Builder, animationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, animationsOffset, 0);
}

static createAnimationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAnimationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endAnimePackData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAnimePackData(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, partsOffset:flatbuffers.Offset, animationsOffset:flatbuffers.Offset):flatbuffers.Offset {
  AnimePackData.startAnimePackData(builder);
  AnimePackData.addName(builder, nameOffset);
  AnimePackData.addParts(builder, partsOffset);
  AnimePackData.addAnimations(builder, animationsOffset);
  return AnimePackData.endAnimePackData(builder);
}
}
