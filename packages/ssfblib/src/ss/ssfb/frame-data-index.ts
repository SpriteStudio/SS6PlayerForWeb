// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { partState } from '../../ss/ssfb/part-state.js';


export class frameDataIndex {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):frameDataIndex {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsframeDataIndex(bb:flatbuffers.ByteBuffer, obj?:frameDataIndex):frameDataIndex {
  return (obj || new frameDataIndex()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsframeDataIndex(bb:flatbuffers.ByteBuffer, obj?:frameDataIndex):frameDataIndex {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new frameDataIndex()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

states(index: number, obj?:partState):partState|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new partState()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

statesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startframeDataIndex(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addStates(builder:flatbuffers.Builder, statesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, statesOffset, 0);
}

static createStatesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endframeDataIndex(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createframeDataIndex(builder:flatbuffers.Builder, statesOffset:flatbuffers.Offset):flatbuffers.Offset {
  frameDataIndex.startframeDataIndex(builder);
  frameDataIndex.addStates(builder, statesOffset);
  return frameDataIndex.endframeDataIndex(builder);
}
}
